# Docker images provided by https://github.com/cypress-io/cypress-docker-images
# this example mostly follows the GitLab example in
# https://github.com/cypress-io/cypress-example-kitchensink

# first, install Cypress, then run all tests (in parallel)
stages:
  - build
  - test

# to cache both npm modules and Cypress binary we use environment variables
# to point at the folders we can list as paths in "cache" job settings
variables:
  YARN_CACHE: "$CI_PROJECT_DIR/.yarn"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"

# cache using branch name
# https://gitlab.com/help/ci/caching/index.md
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ${YARN_CACHE}
    - node_modules

# this job installs NPM dependencies and Cypress
install:
  image: cypress/base:14
  stage: build

  script:
    - yarn config set globalFolder ${YARN_CACHE}
    - yarn install
    # show where the Cypress test runner binaries are cached
    # - $(npm bin)/cypress cache path
    # show all installed versions of Cypress binary
    - $(npm bin)/cypress cache list
    - $(npm bin)/cypress verify

# two jobs that run after "install" job finishes
# NPM dependencies and Cypress binary should be already installed
cypress-e2e:
  image: cypress/base:10
  stage: test
  script:
    - yarn config set globalFolder ${YARN_CACHE}
    - yarn run-many --target=e2e --all=true --verbose=true
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - dist/cypress/screenshots
      - dist/cypress/videos
    reports:
      junit:
        - dist/cypress/results/TEST-*.xml
# cypress-e2e-chrome:
#   image: cypress/browsers:chrome67
#   stage: test
#   script:
#     - $(npm bin)/cypress run --browser chrome
#   artifacts:
#     expire_in: 1 week
#     when: always
#     paths:
#       - dist/cypress/screenshots
#       - dist/cypress/videos
#     reports:
#       junit:
#         - results/TEST-*.xml
# tip: lint this file using https://gitlab.com/ci/lint
